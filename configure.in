#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/.
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is AOLserver Code and related documentation
# distributed by AOL.
# 
# The Initial Developer of the Original Code is America Online,
# Inc. Portions created by AOL are Copyright (C) 1999 America Online,
# Inc. All Rights Reserved.
#
# Alternatively, the contents of this file may be used under the terms
# of the GNU General Public License (the "GPL"), in which case the
# provisions of GPL are applicable instead of those above.  If you wish
# to allow use of your version of this file only under the terms of the
# GPL and not to allow others to use your version of this file under the
# License, indicate your decision by deleting the provisions above and
# replace them with the notice and other provisions required by the GPL.
# If you do not delete the provisions above, a recipient may use your
# version of this file under either the License or the GPL.
# 
#
# $Header$
#

#
# configure.in --
#
#    NaviServer configure script.
#

AC_INIT(NaviServer, 4.99.2, naviserver-devel@lists.sourceforge.net)
AC_CONFIG_SRCDIR(include/ns.h)
AC_CONFIG_HEADER(include/config.h)
AC_PREREQ(2.50)
AC_REVISION($Revision$)
AM_INIT_AUTOMAKE


#
# Version info for include/nsversion.h
#
# Don't forget to update the naviserver.rdf DOAP before making a release.
#

NS_MAJOR_VERSION=4
NS_MINOR_VERSION=99
NS_RELEASE_SERIAL=2
NS_VERSION=\"4.99\"
NS_PATCH_LEVEL=\"4.99.2\"
NS_RELEASE_LEVEL=NS_ALPHA_RELEASE  # NS_ALPHA_RELEASE, NS_BETA_RELEASE, NS_FINAL_RELEASE

AC_SUBST(NS_MAJOR_VERSION)
AC_SUBST(NS_MINOR_VERSION)
AC_SUBST(NS_RELEASE_SERIAL)
AC_SUBST(NS_VERSION)
AC_SUBST(NS_PATCH_LEVEL)
AC_SUBST(NS_RELEASE_LEVEL)


#
# Include and verify Tcl config located by --with-tcl=
#

TEA_INIT([3.5])
TEA_PATH_TCLCONFIG
TEA_LOAD_TCLCONFIG
TEA_ENABLE_THREADS
if test "${TCL_THREADS}" != "1"; then
    AC_MSG_ERROR([must build tcl with --enable-threads])
fi
TEA_SETUP_COMPILER
TEA_PUBLIC_TCL_HEADERS
TEA_ENABLE_SHARED
TEA_CONFIG_CFLAGS
TEA_ENABLE_SYMBOLS
TEA_TIME_HANDLER

#
# Modify SHLIB_LD from tclConfig.sh as we specifically
# name shared library _init functions.
#

test "x$prefix" = "xNONE" && prefix="/usr/local/ns"
system=`uname`
case "$system" in
  Darwin)
    LDLIB="cc -dynamiclib -install_name \$(INSTLIB)/\$(LIBFILE)"
    LDSO="cc -bundle"
    CCRFLAG=
    LDRFLAG=
    CCRPATHS=
    LDRPATHS=
  ;;
  *)
    LDLIB="$SHLIB_LD"
    case "$LDLIB" in
      *gcc*)
        LDLIB="$LDLIB -nostartfiles"
      ;;
    esac
    CCRPATH="\$(CCRFLAG)\$(INSTLIB)"
    LDRPATH="\$(LDRFLAG)\$(INSTLIB)"
    if test "$TCL_EXEC_PREFIX" != "$prefix"; then
      CCRPATH="$CCRPATH \$(CCRFLAG)\$(TCL_EXEC_PREFIX)/lib"
      LDRPATH="$LDRPATH \$(LDRFLAG)\$(TCL_EXEC_PREFIX)/lib"
    fi
    if test -d /usr/lib/lwp; then
      CCRPATH="$CCRPATH \$(CCRFLAG)/usr/lib/lwp"
      LDRPATH="$LDRPATH \$(LDRFLAG)/usr/lib/lwp"
    fi
    LDSO="\$(LDLIB)"
    CCRPATHS="\$(CCRPATH)"
    LDRPATHS="\$(LDRPATH)"
    CCRFLAG=$TCL_CC_SEARCH_FLAGS
    LDRFLAG=$TCL_LD_SEARCH_FLAGS
    if test "$CCRFLAG" = "" ; then
      CCRPATH=
    fi
    if test "$LDRFLAG" = "" ; then
      LDRPATH=
    fi
  ;;
esac

SRCDIR=`cd $srcdir; pwd`
NAVISERVER=$prefix
AC_SUBST(SRCDIR)
AC_SUBST(LDLIB)
AC_SUBST(LDSO)
AC_SUBST(CCRFLAG)
AC_SUBST(LDRFLAG)
AC_SUBST(CCRPATH)
AC_SUBST(LDRPATH)
AC_SUBST(SHLIB_SUFFIX)
AC_SUBST(TCL_EXEC_PREFIX)
AC_SUBST(NAVISERVER)


#
# Additional checks.
#

AC_CHECK_HEADERS(inttypes.h uio.h sys/uio.h stdint.h)
AC_CHECK_TYPES(u_int32_t)
AC_CHECK_TYPES(u_int16_t)
AC_CHECK_TYPES(u_int8_t)
AC_CHECK_FUNCS(timegm fork1 drand48 random _NSGetEnviron unsetenv)
AC_CHECK_HEADER(mach-o/dyld.h, AC_DEFINE(USE_DYLD, 1, [Define to 1 if the <mach-o/dyld.h> header should be used.]),)
AC_CHECK_HEADER(dl.h, AC_DEFINE(USE_DLSHL, 1, [Define to 1 if the <dl.h> header should be used.]),)
AC_MSG_CHECKING([need for dup high])
AC_TRY_RUN([
  #include <stdio.h>
  int main(int argc, char **argv) {
    return (sizeof(stdout->_file) == 1) ? 0 : 1;
  }
], AC_DEFINE(USE_DUPHIGH, 1, [need for dup high]) as_ok=yes, as_ok=no, as_ok=no)
AC_MSG_RESULT($as_ok)

#
# Darwin's port of poll() is broken as it may return
# socket as writable although it ain't. We provide
# our own alternative implementation which is known
# to be working. For other platforms, use if there.
#
if test "`uname -s`" != "Darwin"; then
    AC_CHECK_FUNCS(poll)
fi

#
# Normally, we'd link the resulting server image
# dynamically. In some cases it is however more
# appropriate to build it as a monolithic image.
#

AC_MSG_CHECKING([how to build server image])
AC_ARG_ENABLE(shared,
  [  --enable-shared         build and link with shared libraries [--enable-shared]],
   shared_ok=$enable_shared, shared_ok=yes)
if test "$shared_ok" = "yes" ; then
  if test "${TCL_SHARED_BUILD}" != "1" ; then
    AC_MSG_ERROR([must build tcl with --enable-shared])
  fi
  STATIC_BUILD=0
  AC_MSG_RESULT([shared])
else
  if test "${TCL_SHARED_BUILD}" != "0" ; then
    AC_MSG_ERROR([must build tcl with --disable-shared])
  fi
  STATIC_BUILD=1
  AC_MSG_RESULT([static])
fi
AC_SUBST(STATIC_BUILD)

AC_CACHE_CHECK([for shared libgcc], ac_cv_shared_libgcc, [
  ac_save_LIBS="$LIBS"
  LIBS="-lgcc_s $LIBS"
  AC_TRY_LINK(, [return 0], ac_cv_shared_libgcc=yes, ac_cv_shared_libgcc=no)
  LIBS="$ac_save_LIBS"
])
if test "$ac_cv_shared_libgcc" = "yes" ; then
  LIBS="-lgcc_s $LIBS"
fi

have_mtsafe_dns=no
AC_CHECK_LIB(socket, getaddrinfo)
AC_CHECK_LIB(socket, getnameinfo)
AC_CHECK_FUNCS(getaddrinfo getnameinfo)
if test "${ac_cv_func_getaddrinfo}" = "yes" \
     -a "${ac_cv_func_getnameinfo}" = "yes" \
     -a "`uname -s`" != "Darwin"; then
  have_mtsafe_dns=yes
fi
if test "${have_mtsafe_dns}" != "yes" \
     -a "`uname -s`" != "Darwin"; then
  AC_HAVE_GETHOSTBYNAME_R
  AC_HAVE_GETHOSTBYADDR_R
  if test "${ac_cv_func_gethostbyname_r}" = "yes" \
       -a "${ac_cv_func_gethostbyaddr_r}" = "yes" ; then
    have_mtsafe_dns=yes
  fi
fi
if test "${have_mtsafe_dns}" != "yes" ; then
  AC_MSG_WARN([DNS queries use MT-unsafe calls which could result in server instability])
else
  AC_DEFINE(HAVE_MTSAFE_DNS, 1, [Define to 1 if DNS calls are MT-safe])
fi

AC_MSG_CHECKING([whether to include zlib compression support])
AC_ARG_WITH(zlib,
  [  --with-zlib[=DIR]       build and link with Zlib [--with-zlib]],
  [ 
    ac_zlib=$withval
    if test "${ac_zlib}" != "no" ; then
      ac_zlib=yes
      if test -d "$withval" ; then
        CPPFLAGS="$CPPFLAGS -I$withval/include"
        LDFLAGS="$LDFLAGS -L$withval/lib"
      fi
    fi
  ], [ac_zlib=yes])
AC_MSG_RESULT($ac_zlib)
if test "${ac_zlib}" = "yes" ; then
  AC_CHECK_HEADERS(zlib.h)
  AC_CHECK_LIB(z, compress2)
  if test "${ac_cv_header_zlib_h}" != "yes" -o "${ac_cv_lib_z_compress2}" != "yes" ; then
    AC_MSG_WARN([Zlib compression support requested but not available])
  fi
fi


#
# Darwin version of getnameinfo will not work correctly
# if we do not explicitly set sin_len element of the
# struct sockaddr_in to the total size of the structure.
# Some OS variants however do not have the sin_len member
# so test if this is the case.
#

AC_CHECK_MEMBERS([struct sockaddr_in.sin_len],,,[
#include <sys/types.h>
#include <netinet/in.h>])

AC_HAVE_CMMSG

dnl ** Check for inet_ntop
AC_MSG_CHECKING(for inet_ntop)
AC_TRY_COMPILE([#include <sys/socket.h>
#include <arpa/inet.h>], [inet_ntop(0, (char *)0, (char *)0, 0);], has_inet_ntop=yes, has_inet_ntop=no)
if test "$has_inet_ntop" = yes; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_INET_NTOP,,[we can use inet_ntop()])
else
    AC_MSG_RESULT(no)
fi

# Use native crypt if possible
case "`uname`" in
  Linux)
     LIBS="-lcrypt $LIBS"
  ;;
esac

AC_OUTPUT(include/nsversion.h include/Makefile.global include/Makefile.module sample-config.tcl)
