[manpage_begin {NaviServer Maintenance Guide} n 4.99.2]

[titledesc {NaviServer Maintenance Guide}]

[description]

[section {NaviServer Command Line}]


[para]


bin/nsd [ -i | -f ] [-s servername] [ -d ] [ -k | -K ] [ -V ] [ -r root ] {-c | -t} config

Options:


[para]


[list_begin bullet]

[bullet] [emph {-i}]


[nl]


     Run NaviServer from /etc/inittab. This option is similar to -f except
     that stdout goes to the server.log file.

[bullet] [emph {-f}]


[nl]


     Run NaviServer in the foreground.

[bullet] [emph {-s servername}]


[nl]


     Specify the server to run, if the configuration file defines multiple
     servers. The Server1 server will be run by default.

[bullet] [emph {-d}]


[nl]


     Run NaviServer in the debugger (ignore SIGINT).

[bullet] [emph {-k}]


[nl]


     Kill the running NaviServer (based on pidfile) and continue.

[bullet] [emph {-K}]


[nl]


     Kill the running NaviServer (based on pidfile) and terminate.

[bullet] [emph {-V}]


[nl]


     Print the version number of NaviServer.

[bullet] [emph {-r root}]


[nl]


     Perform chroot to a new root directory.

[bullet] [emph {{-c|-t} config}]


[nl]


     Required. Specify -c if the configuration file is in the .ini format
     from previous NaviServer versions or -t if the configuration file is in
     .tcl format. Specify the path to the configuration file.

[list_end]



[para]


 [subsection {Examples}]


[para]


[emph {nsd -t nsd.tcl}]


[para]


This is the simplest form of the command line.


[para]


[emph {nsd -ft nsd.tcl}]


[para]


NaviServer will be run in the foreground.


[para]


[emph {nsd -fkt nsd.tcl -r /newroot}]


[para]


NaviServer will be run in a chroot environment, and any
currently-running server will be killed.


[para]


[section {NaviServer Maintenance}]


[para]


An NaviServer installation requires regular maintenance as follows:


[para]



[list_begin enum]


[enum] Make regular backups of pages and associated files for each
     virtual server.


[nl]


[enum] Make regular backups of the access log.


[nl]


[enum] Make regular backups of the server log, especially if verbose
     messages are enabled.


[nl]


[enum] Make regular backups of the Tcl directory(ies).


[nl]


[enum] Make regular backups of the bin directory, especially if you have
     customized loadable modules.


[list_end]



[para]


Each of these maintenance tasks is described in the following sections.


[para]


[section {Maintain the NaviServer Directories}]


[para]


The NaviServer directories described below should be backed up
regularly to ensure against file system failure.


[para]


 [subsection {Back Up the Pages Directory}]


[para]


The location of the pages directory for each virtual server is
determined by the server-specific PageDir entry in the NaviServer
configuration file. Normally, it is the /pages subdirectory under
the NaviServer home directory.


[para]


Use whatever file system backup procedure you have in place at your
site. To schedule nightly backups, use the Unix cron facility.


[para]


 [subsection {Back Up the Access Log}]


[para]


The access log file needs to be backed up regularly. By default, the
access log for each virtual server is in the
/logs/access.log file under the NaviServer home directory.


[para]


The access log can be configured to limit the number of old logs
maintained (with the MaxBackup parameter). This sets an upper limit on
the amount of disk space the access logs take. However, because old
logs beyond the limit configured to be saved by the NaviServer are
deleted automatically, you must back up old logs if you require a
complete history of access to your site. For example, if the MaxBackup
parameter in the configuration file is set to 5, only five old access
log files will remain on disk. When a sixth log file needs to be
opened, the oldest log is removed.


[para]


 [subsection {Back Up the Server Log}]


[para]


Ordinarily, the server log file grows at a slow rate and does not need
regular truncation. However, while debugging new applications, you
should set the Verbose parameter in the ns/module/nsdb/pool/pool-name
section in the configuration file to on instead of off (the
default). Every SQL statement sent to the database is logged in the
error log and causes the file to grow much more quickly. In this case
you may want to back up the error log.


[para]


 [subsection {Back Up the Tcl Scripts Directory}]


[para]


The Tcl scripts directory contains the source to the Tcl scripts that
provide the server with much of its advanced functionality. Tcl
scripts for each virtual server are stored in the
/tcl subdirectory by default, and global Tcl scripts are
stored in the /modules/tcl subdirectory by default.


[para]


If you write new Tcl scripts or edit the existing ones, you must
ensure your changes are saved regularly to a safe place. Also, be sure
that any external files utilized by your Tcl scripts are backed up
too, including files outside the NaviServer home directory.


[para]


 [subsection {Back Up the bin Directory}]


[para]


The /bin subdirectory of the NaviServer home is the location of the
NaviServer binary and the default location of any dynamically loadable
C modules. If your site maintains several interesting loadable
modules, you must make sure copies of the modules are backed up to
avoid having to recompile them after a file system failure. Also, be
sure to back up your module source code.



[para]


[section {Directory Map}]


[para]


This table describes all of the directories that are created under the
NaviServer installation directory when you install NaviServer. It lists
the files or types of files that are stored in each directory, the
configuration parameters that affect the directory or the files in the
directory, and references to where you can find more information on
the associated NaviServer features.


[para]


[emph {/bin}]


[para]


Directory containing the NaviServer binary and the default directory
for any dynamically-loadable C modules.


[para]


Files:


[para]


 .so files
 nsd
 translate-ini


[para]


[emph {/include}]


[para]


Directory containing header files for NaviServer.


[para]


Files:


[para]


 .h files


[para]


[emph {/lib}]


[para]


Directory containing static libraries used for building customized
components to NaviServer. This directory currently only includes the
libnspd.a file that can be used to build database proxy daemons
(external database drivers).


[para]


Files:


[para]


 libnsd.so
 libnsdb.so
 libnsthread.so
 libnsproxy.so


[para]


[emph {/logs}]


[para]


Directory containing log files and the server pid file.


[para]


Files:


[para]


 access.log
 server.log
 nsd.pid


[para]


[emph {/modules}]


[para]


Contains directories for each configured module that operates across
servers, such as the tcl module.


[para]


[emph {/modules/nscp}]


[para]


Directory containing files related to control port interface.


[para]


Files:


[para]


 tcsh.inputrc


[para]



[emph {/tcl}]


[para]


Default directory for shared Tcl script library. Also contains
subdirectories containing Tcl examples and Tcl scripts for various
modules.


[para]


Files:


[para]


 .tcl files


[para]


[emph {/modules/nsperm}]


[para]


Directory containing user, group, and permissions files which is used to provide access control
for NaviServer.


[para]


Files:


[para]


 passwd file
 group file
 hosts.allow file
 hosts.deny file
 perms file


[para]


[emph {/modules/tcl}]


[para]


Default directory for private Tcl script library for this server.


[para]


Files:


[para]


 .tcl files


[para]



[emph {/pages}]


[para]


Default directory where pages and graphics for the server are stored.
Users can optionally have individual subdirectories of this directory
(see UserDir, below).


[para]


Files:


[para]


 typically, .htm, .html, .shtml, and .adp files


[para]


[titledesc {NaviServer Security Guide}]
[description]


This chapter provides guidelines for ensuring the security of systems
running NaviServer. It describes the issues that must be considered and
the associated modifications that should be made to NaviServer
installations.


[para]


 [subsection {General nsadmin Passwords}]


[para]


By default, the nsadmin password for NaviServer is either set to NULL
or to a poor password. Set an acceptable password for nsadmin as
described below.


[para]


Edit the nsadmin entry in the /modules/nsperm/passwd file. For
example, the default passwd file contains this nsadmin entry:
 nsadmin:CUdnvgBYocLSI:::::


[para]


Substitute an alternate encrypted password in place of CUdnvgBYocLSI.


[para]


To encrypt a password, you can copy an already-encrypted password from
the /etc/passwd file or run the bin/nspasswd utility. It will prompt
you for a password and return the encrypted version of the password.


[para]


For more information about the passwd file, see the "Defining Users"
section.


[para]


 [subsection {Permission Settings}]


[para]


It is more secure to avoid using the nsperm module and use file-level
security for ADPs. If you must use the nsperm module, set appropriate
permissions records as follows:


[para]



[list_begin enum]


[enum] Maintain the same permission records for GET and POST; they
     actually provide the same permissions.


[nl]


[enum] Remove any permission records related to network publishing (PUT,
     DELETE, MKDIR, and BROWSE) for all users except nsadmin.


[nl]


[enum] Keep in mind the inheritance rules for permission records. In
     general, a permission record for a directory also applies to the
     directories underneath it.

[list_end]



[para]


To define NaviServer permissions, create permission entries for them in
the perms file, which resides in the /modules/nsperm directory. The
default perms file does not contain any permission entries, but it
contains comments that explain how to add entries to the file.


[para]


For more information about setting permissions, see the "Permissions"
section.


[para]


[section {Recommended Security Modifications}]


[para]


The actions described in this section are recommended, but not
required, to ensure the security of systems running NaviServer.


[para]


 [subsection {NaviServer Version}]


[para]


In general, NaviServer versions 4.99 and higher should be used whenever
possible, because they are more secure than earlier versions of
NaviServer.


[para]


[list_begin bullet]

[bullet] NaviServer can be run in a chroot environment.


[nl]


[bullet] The configuration file, which has a new Tcl format, is executed in
     a separate, temporary interpreter that is destroyed before startup
     begins. The configuration file memory buffer is then zeroed after
     parsing.


[nl]


[bullet] The nsd binary can be stored outside the root directory because
     NaviServer no longer locates and re-executes itself.


[nl]


[bullet] The configuration file can be stored outside the root directory,
     because NaviServer opens and reads the configuration file before
     running chroot().


[nl]


[bullet] The nscp module, which allows connections only from localhost,
     provides a secure control port interface that allows ad hoc Tcl
     evaluation and other server administration features. For more
     information about the control port interface, see the "NaviServer's
     Control Port Interface" section.

[list_end]



[para]


 [subsection {Secure chroot Environment}]


[para]


NaviServer should be run in a secure chroot() environment whenever
possible.


[para]


In Versions 4.99 or higher, NaviServer supports a -r command line option
to run NaviServer in a chroot() environment. It provides the following
benefits:


[para]


[list_begin bullet]

[bullet] The chroot() system call updates the process such that all
     absolute filenames are relative to a new root directory instead of
     the actual mounted file system.


[nl]


[bullet] The chroot() call is irrevocable. Once chroot() returns, the
     server cannot access any file above the new root directory.


[nl]


[bullet] Although it does not actually protect any of the underlying
     content, scripts, or protected databases, chroot() is the single
     most effective tool for protecting the server machine and
     sensitive information, such as user passwords and configuration
     files, from view.

[list_end]



[para]


To run NaviServer in a chroot() environment, you need only copy a few
files and directories to the new root directory. For example, on the
SGI platform, you would execute the following commands to create new
directories and copy the necessary files to them:


[para]


mkdir $root/dev $root/tmp $root/etc


[para]


chmod 1777 $root/tmp


[para]


cd $root/dev; /dev/MAKEDEV generic usema


[para]


cp /etc/passwd /etc/resolve.conf $root/etc


[para]


Then, you can run NaviServer with the -r option as in this example:
 nsd -t nsd.tcl -r $root


[para]


For more information about the nsd command line, see the "NaviServer
Command Line" section.


[para]


 [subsection {Restricted Content}]


[para]


Determine whether any of the content available to an NaviServer in a
chroot() environment would be restricted. In general, NaviServer should
be read-only and everything it can read should be world-readable. This
allows the NaviServer administrator to ignore the nsperm module
altogether.


[para]


If any of the content available to NaviServer is restricted, the
NaviServer administrator needs to define the appropriate permissions
with the nsperm module. The administrator should be very clear which
areas are blocked off and know both the URL and METHOD for the
restricted areas.


[para]


It is preferable to allow the GET method for all URLs and have nothing
restricted accessible through NaviServer.


[para]


 [subsection {Tcl Library}]


[para]


Limit the available Tcl functions to just those functions that are
necessary by that particular NaviServer installation. Purge the Tcl
library of unnecessary functions. For example, if the site doesn't
send e-mail, remove the ns_sendmail procedures.


[para]


Some potentially unsafe commands you may want to consider removing
are:


[para]


[list_begin bullet]

[bullet] File system related functions, such as open, read, and puts


[nl]


[bullet] The NaviServer ns_sock* Tcl functions


[nl]


[bullet] The Tcl socket routines


[nl]


[bullet] The exec command


[nl]


[bullet] The file command, or at least the delete and rename features


[nl]


[bullet] The exit command


[list_end]



[para]


This code example disables the open command:


[para]



[example_begin]

static int
AddCmds(Tcl_Interp, void *arg) {
    Tcl_CreateCommand(interp, "open", BadCmd, NULL, NULL);
    return TCL_OK;
}

static int
BadCmd(ClientData dummy, Tcl_Interp *interp, int argc, char **argv) {
    Tcl_AppendResult(interp, "disabled command: ", argv[0], NULL);
    return TCL_ERROR;
}


[example_end]



[para]


 [subsection {Database Access}]


[para]


Database access should be restricted with read-only logins to the
server and queries through stored procedures.


[para]


For more information about the Tcl functions for stored procedures,
see the "ns_db" section of the NaviServer Tcl Developer's Guide. For
more information about the C functions for stored procedures, see the
"Stored Procedure Functions" section of the NaviServer C Developer's
Guide.


[para]


 [subsection {Control Port Interface}]


[para]


The control port interface should not be used unless absolutely
necessary. Although it is more secure than the /NS/Admin interface
from earlier NaviServer versions because it only allows connections
from localhost, it still poses a risk potential.


[para]


For more information about the control port interface, see the
"NaviServer's Control Port Interface" section.

[manpage_end]
