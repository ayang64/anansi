[manpage_begin {NaviServer nsv Commands} n 4.99.2]

[titledesc {NaviServer nsv Commands}]

[description]


The nsv commands provide a high performance data sharing mechanism.
This facility is much flexible alternative to the obsolete ns_share
command.  The model uses an array syntax and includes more features.
In addition, lock contention is managed in a much more scalable
way--something that is not possible with the obsolete ns_share
facility.

[section {Basics}]


[para]


The following commands currently make up the nsv interface:


[para]


    	nsv_get - get key value

[para]

    	nsv_exists - check key existence

[para]

    	nsv_set - set key value

[para]

    	nsv_append - append value

[para]

    	nsv_lappend - append value as list element

[para]

    	nsv_incr - increment and return value

[para]

    	nsv_unset - unset a value

[para]

    	nsv_array - manage nsv arrays

[para]



[para]


Commands for the most part mirror the cooresponding Tcl command for
ordinary variables.  Basically, to set a value, simply use the nsv_set
command:


[para]


[example_begin]

	nsv_set myarray foo $value

[example_end]



[para]


and to get a value, simply use the nsv_get command:


[para]



[example_begin]


	set value [lb]nsv_get myarray foo[rb]


[example_end]



[para]





[para]


[section {Migrating From ns_share}]


[para]


Migrating from ns_share is straightforward.  If your init.tcl included commands such as:


[para]


[example_begin]

	ns_share myshare
	set myshare(lock) [lb]ns_mutex create[rb]

[example_end]



[para]


use instead:


[para]



[example_begin]


	nsv_set myshare lock [lb]ns_mutex create[rb]

[example_end]



[para]


In your procedures, instead of:


[para]



[example_begin]


	proc myproc {} {
		ns_share myshare
		ns_mutex lock $myshare(lock)
		...


[example_end]



[para]


use:


[para]



[example_begin]



	proc myproc {} {
		ns_mutex lock [lb]nsv_get myshare lock[rb]
		...


[example_end]



[para]


and within an ADP page, instead of:


[para]



[example_begin]



	<%
	ns_share myshare
	ns_puts $myshare(key1)
	%>

	<%=$myshare(key2)%>


[example_end]



[para]


use:


[para]



[example_begin]


	<%
	ns_puts [lb]nsv_get myshare key1[rb]
	%>

	<%=[lb]nsv_get myshare key2[rb]%>


[example_end]



[para]



Notice that, unlike ns_share, no command is required to define the
shared array.  The first attempt at setting the variable through any
means will automaticaly create the array.  Also notice that only arrays
are supported.  However, to migrate from ns_share you can simply package
up all existing ns_share scalars into a single array with a short name,
perhaps just ".". For example, if you had:


[para]



[example_begin]


	ns_share mylock myfile
	set myfile /tmp/some.file
	set mylock [lb]ns_mutex create[rb]

[example_end]





you can use:






[example_begin]

	nsv_set . myfile /tmp/some.file
	nsv_set . mylock [lb]ns_mutex create[rb]


[example_end]



[para]



[section {Multithreading Features}]


[para]


One advantages of nsv is built in interlocking for thread safety.
For example, consider a case of a "increment-by-one" unique id system.
Here's the ns_share solution:


[example_begin]


	ns_share ids
	set ids(lock) [lb]ns_mutex create[rb]
	set ids(next) 0

	proc nextid {} {
		ns_share ids
		ns_mutex lock $ids(lock)
		set next [lb]incr ids(next)[rb]
		ns_mutex unlock $ids(lock)
		return $next
	}


[example_end]


and here's an nsv solution:


[example_begin]

	nsv_set ids next 0

	proc nextid {} {
		return [lb]nsv_incr ids next[rb]
	}


[example_end]


Note that the nsv solution does not need a mutex as the nsv_incr command
is internally interlocked.


[para]



[section {Compatibility with Tcl Arrays}]


[para]


Another useful feature of nsv is the nsv_array command which works much
like the Tcl array command.  This can be used to import and export values
from ordinary Tcl arrays.  For example, to copy from Tcl use:


[para]


	nsv_array set meta [lb]array get tmpmeta[rb]


[para]


and to copy to Tcl use:


[para]


	array set metacopy [lb]nsv_array get meta[rb]


[para]


As with all other nsv command, nsv_array is atomic and no explicit
locking is required.  This feature can be used to contruct a new nsv
array by first filling up an ordinary temporary Tcl array via some time
consuming process and then swapping it into place as above.  While the
new temporary array is being constructed, other threads can access the
old array without delay or inconsistant data.  You can even reset a
complete nsv array in one step with "reset".  For example, instead of:


[example_begin]

	ns_share lock meta
	set lock [lb]ns_mutex create[rb]
	ns_mutex lock $lock
	unset meta
	array set meta [lb]array get tmpmeta[rb]
	ns_mutex unlock $lock

[example_end]


you can simply use:


[para]


	nsv_array reset meta [lb]array get tmpmeta[rb]


[para]


The reset option will flush and then reset all values atomically,
eliminating the need for the explicit lock.


[para]


Other options for the nsv_array command include:


[para]


	nsv_exists array - test existance of array

[para]

	nsv_size array - return # of elements in array

[para]

	nsv_names array - return keys of array


[para]



[section {Configuration}]


[para]


The nsv system uses a common multithreading technique to reduce the
potential for lock contention which is to split the locks to acheive
finer grained locking.  This technique groups arrays randomly into
buckets and only the arrays within a particular bucket share a lock.
The number of buckets to be used can be configured by setting the
"nsvbuckets" tcl parameters, e.g.:


[para]



[example_begin]


	[lb]ns/server/server1/tcl[rb]
        nsvbuckets=20

[example_end]



[para]


The default is 8 which should be reasonalbe.  Note that you can monitor
the lock contention, if any, by enabling mutex metering:


[para]



[example_begin]

	[lb]ns/threads[rb]
        mutexmetering=on

[example_end]


[para]


and then viewing the results of "ns_info locks" command after the server
has been running for some time.  The nsv locks all have names of the
form "nsv:##".  If you find many lock attempts which did not successed
immediately, try increasing nsvbuckets.


[manpage_end]
