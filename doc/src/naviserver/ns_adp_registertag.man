[include version_include.man]
[manpage_begin   ns_adp_registertag n [vset version]] 
[moddesc  {NaviServer Built-in Commands}]

[titledesc {Creating custom ADP tags}]

[description]

These commands enable definition of HTML tags within an ADP file
which are expanded and evaluated by the server before returning output
to the client. Tags are defined as either a single tag with
options, e.g.,  <mytag a=b c=d>  or as an
opening/closing tag pair, e.g.,  <mytag> text
</mytag> . This approach is an alternative to
direct calls via the  <% script %>  syntax as
described in the  ns_adp  man page.

[section COMMANDS]

[list_begin definitions]

[call [cmd ns_adp_registeradp] [arg tag]  [opt [arg endtag]] [arg adp]]
[call [cmd ns_adp_registertag] [arg tag]  [opt [arg endtag]] [arg adp]]

These commands are identical and register an ADP
code fragment to be invoked when the specified tag is
encountered while parsing an ADP. The  tag  argument
specifies the tag that will trigger invocation of the ADP
fragment, which is specified by the  adp  argument.

[para]
If the  endtag  argument is specified, then the ADP fragment
will be invoked with two arguments: The first will be the
enclosed content, and the second will be the name of an
ns_set with any attributes specified in the tag. If no
endtag  argument is specified, the ADP fragment will
only be passed the name of the ns_set. The arguments may be
retrieved using  ns_adp_bindargs  or  ns_adp_argc 
and  ns_adp_argv .

[para]
When the ADP fragment is invoked, its result is inserted in the output
instead of the tag (or, if the  endtag  was specified,
in place of the tag, end tag, and the enclosed content).

[para]
Note: Care must be taken when using this function from inside an ADP, because
the  adpstring  is likely to contain script delimiters
( <% ... %> ) which will prematurely terminate
script fragments. It is probably easier to restrict use of
this function to .tcl files.

[example_begin]
   ns_adp_registertag example example.adp
[example_end]

[call [cmd ns_adp_registerproc] \
	[arg tag] \
	[opt [arg endtag]] \
	[arg proc]]

This commands register a Tcl procedure to be evaluated when the given 
tag is encountered. The  tag  argument specifies the tag
that will trigger a call to the procedure specified by the
proc  argument.

[para]
The procedure will be called with a variable number of arguments, 
one for each of the attributes provided in the tag. If the  endtag 
argument is specified, the procedure will also receive a
final argument with the contents of the text enclosed
between the tags. No evaluation of the content will be
performed, it will be passed as a single text block.

[para]
When the procedure is invoked, its result is inserted in the 
output instead of the tag (or, if the  endtag  was specified, in place of
the tag, end tag, and the enclosed content).

[call [cmd ns_adp_registerscript] [arg tag] [opt [arg endtag]] [arg script]]
[call [cmd ns_register_adptag] [arg tag] [opt [arg endtag]] [arg script]]

These commands are identical and register a Tcl script to be evaluated when the 
given tag is encountered. The  tag  argument specifies the tag that
will trigger evaluation of the script specified by the
script  argument.

[para]
If the  endtag  argument is specified, then the script will be
modified with two arguments appended: The first will be the
enclosed content, and the second will be the name of an
ns_set with any attributes specified in the tag. If no
 endtag  argument is specified, the script will be
modified with just the name of the ns_set appended.

[para]
There are two ways to use [term ns_register_adptag], with and without the endtag parameter:

[list_begin itemized]

[item] If the endtag parameter is specified, the procedure you specify with proc must be of the form:

[example_begin]
   proc myadpproc { string tagset } {...}
[example_end]

         The string is the string of characters between the beginning tag and the ending tag.
         The tagset is an ns_set of parameters that were specified with the beginning tag.
         The return value of the procedure will be sent to the browser in place of the string
         of text that was specified between the beginning and ending tags.
         [para]
         The string is not parsed, which means that you cannot include ADP tags in the string unless
         you execute ns_adp_parse on the string inside the procedure that processes the registered ADP tag.

[item] If endtag is not specified, then no closing tag is required. The procedure (proc)
         will be called every time the specified command is encountered. The procedure should
         take one parameter, an ns_set containing the parameters to the tag:
[example_begin]
   proc myadpproc { tagset } {...}
[example_end]
[list_end]

Note: This function cannot be called after the server has started. It must be called in a
Tcl script in a virtual server's Tcl directory so that it can be initialized at server startup time.

[para]

For example, suppose you want to register a tag that displays the enclosed text only if it is Christmas.
You could register the tag as follows:

[example_begin]
   ns_register_adptag "christmas" "/christmas" xmas
   
   proc xmas {string tagset} {
      if { [lb]ns_fmttime [lb]ns_time[rb] "%m/%d"[rb] eq "12/25" } {
      return $string
   }
}
[example_end]

Then, in an ADP, you could use these tags:

[example_begin]
   <christmas>Merry Christmas to all, and to all a good night!</christmas>
[example_end]

This example shows the use a registered tag without an endtag. The tag is registered as follows:

[example_begin]
   ns_register_adptag hello helloproc
   
   proc helloproc { tags } {
      return "Hello, [lb]ns_set get $tags name[rb]."
   }
[example_end]

In an ADP, you could then use this tag:

[example_begin]
   <hello name=Bob>
[example_end]


[para]
When the script is evaluated, its result is inserted in the output 
instead of the tag (or, if the  endtag  was specified, in place of
the tag, end tag, and the enclosed content).

[para]
The following is a simple way of handling conditional content in ADPs:

[example_begin]

proc remember {input tagset} {

   global _adp_memory
   set tagname [lb]ns_set iget $tagset name[rb]
   if {[lb]string match "" $tagname[rb]} {
     set _adp_memory($tagname) $input
     return ""
   } else {
     return $input
   } 
} 
proc recall {name} {

   global _adp_memory
   if {[lb]info exists _adp_memory($name)[rb]} {
     set parsecommand [lb]list ns_adp_parse -string[rb]
     lappend parsecommand $_adp_memory($name)
     ns_puts -nonewline [lb]uplevel $parsecommand[rb]
   } else {
     ns_log Error "[lb]ns_adp_argv 0[rb]: Unable to recall"
   }
}

[example_end]

If the preceding Tcl has been executed (perhaps during server startup),
then the following ADP fragment displays the results of a
database query in a table, or shows "No rows in
result." if there are no rows:

[example_begin]

<%
  set rows {}
  set db [lb]ns_db gethandle[rb]
  ns_db exec "select somecolumn from sometable"
  set row [lb]ns_db bindargs $db[rb]
  while {[lb]ns_db getrow $db $row[rb]}  {
      lappend rows [lb]ns_set get $row "somecolumn"[rb]
  }
  ns_db releasehandle $db 
%>

<remember name="has-rows_header"> <table> </remember>
<remember name="hasrows_rows"> <tr><td><%=$column%></td></tr> </remember>
<remember name="hasrows_footer"> </table> </remember>
No rows in result.
<remember name="norows"> 

<% 
if {[lb]llength $rows[rb]  >  0}  {
  recall  "hasrows_header"                  
  foreach row $rows {
    set column $row
    recall "hasrows_rows"
  }
  recall "hasrows_footer"
} else {
  recall "norows"         
} 
%>

[example_end]

The following example demonstrates the use of  ns_adp_registertag :

[example_begin]

ns_adp_registertag printdate {
  The current date is: <%=[lb]ns_httptime [lb]ns_time[rb][rb]%>
}

[example_end]

[list_end]

Once defined, typically in a startup script, you could simple include the
"<printdate>" tag to append the text with current date into the output buffer.

[see_also ns_adp ns_adp_eval ns_adp_safeeval ns_adp_include]
[keywords ADP]
[manpage_end]
