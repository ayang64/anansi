#
# $Header$
#


package require tcltest 2.2
namespace import -force ::tcltest::*

eval ::tcltest::configure $argv


if {[ns_config test listenport]} {
    testConstraint serverListen true
}

if {[ns_config "ns/parameters" HackContentType] &&
    [ns_config "ns/parameters" OutputCharset] eq "iso-8859-1"} {
    testConstraint hackContentType true
}


#
# test ns_return with different charsets (also default)
#

test encoding-1.1 {send body with ns_return and charset utf-8} -setup {
    ns_register_proc GET /encoding {
	ns_return 200 "text/plain; charset=utf-8" "äöü"
    }
} -body {
    nstest_http -encoding utf-8 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result [list 200 "text/plain; charset=utf-8" 6 "äöü"]


test encoding-1.2 {send body with ns_return and charset iso-8859-1} -setup {
    ns_register_proc GET /encoding {
	ns_return 200 "text/plain; charset=iso-8859-1" "äöü"
    }
} -body {
    nstest_http -encoding iso8859-1 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result [list 200 "text/plain; charset=iso-8859-1" 3 "äöü"]


test encoding-1.3 {send body with ns_return and default charset} -constraints {hackContentType} -setup {
    ns_register_proc GET /encoding {
	ns_return 200 "text/plain" "äöü"
    }
} -body {
    nstest_http -encoding iso8859-1 -getbody 1 -getheaders {Content-Type} GET "/encoding"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result [list 200 "text/plain; charset=iso-8859-1" "äöü"]


#
# test ns_write (and ns_startcontent) with different charsets (also default)
#

test encoding-2.1 {send body with ns_write and charset utf-8; use ns_startcontent -charset ...} -setup {
    ns_register_proc GET /encoding {
	ns_startcontent -charset "utf-8"
	ns_write "äöü"
    }
} -body {
    nstest_http -encoding utf-8 -getbody 1 GET "/encoding"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result "äöü"


test encoding-2.2 {send body with ns_write and charset utf-8; use ns_startcontent -type ...} -setup {
    ns_register_proc GET /encoding {
	ns_startcontent -type "text/plain; charset=utf-8"
	ns_write "äöü"
    }
} -body {
    nstest_http -encoding utf-8 -getbody 1 GET "/encoding"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result "äöü"


test encoding-2.3 {send body with ns_write and charset iso-8859-1; use ns_startcontent -charset ...} -setup {
    ns_register_proc GET /encoding {
	ns_startcontent -charset "iso-8859-1"
	ns_write "äöü"
    }
} -body {
    nstest_http -encoding iso8859-1 -getbody 1 GET "/encoding"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result "äöü"


test encoding-2.4 {send body with ns_write and charset utf-8; use ns_startcontent -type ...} -setup {
    ns_register_proc GET /encoding {
	ns_startcontent -type "text/plain; charset=iso-8859-1"
	ns_write "äöü"
    }
} -body {
    nstest_http -encoding iso8859-1 -getbody 1 GET "/encoding"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result "äöü"


#
# test adp-pages with different charset-conversions
#

test encoding-3.1 {file in iso-8859-1 encoding should produce utf-8 output} -body {
    nstest_http -encoding utf-8 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding.iso2utf_adp"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result [list 200 "text/plain; charset=utf-8" 6 "äöü"]


test encoding-3.2 {file in utf-8 encoding should produce utf-8 output} -body {
    nstest_http -encoding utf-8 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding.utf2utf_adp"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result [list 200 "text/plain; charset=utf-8" 6 "äöü"]


test encoding-3.3 {file in iso-8859-1 encoding should produce iso-8859-1 output} -body {
    nstest_http -encoding iso8859-1 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding.iso2iso_adp"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result [list 200 "text/plain; charset=iso-8859-1" 3 "äöü"]


test encoding-3.4 {file in utf-8 encoding should produce iso-8859-1 output} -body {
    nstest_http -encoding iso8859-1 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding.utf2iso_adp"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result [list 200 "text/plain; charset=iso-8859-1" 3 "äöü"]


#
# These tests will not work at the moment, because HackContentType has no effect on adp-pages.
#

# test encoding-3.5 {
#     file in iso-8859-1 encoding should produce output with default OutputCharset; 
#     Content-Type-Header will be changed
# } -constraints {hackContentType} -body {
#     nstest_http -encoding iso8859-1 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding.iso_adp"
# } -cleanup {
#     ns_unregister_proc GET /encoding
# } -result [list 200 "text/plain; charset=iso-8859-1" 3 "äöü"]


# test encoding-3.6 {
#     file in utf-8 encoding should produce output with default OutputCharset; 
#     Content-Type-Header will be changed
# } -constraints {hackContentType} -body {
#     nstest_http -encoding iso8859-1 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding.utf_adp"
# } -cleanup {
#     ns_unregister_proc GET /encoding
# } -result [list 200 "text/plain; charset=iso-8859-1" 3 "äöü"]


#
# test of ns_adp_mimetype
#

test encoding-4.0 {output charset changed to iso-8859-1 with ns_adp_mimetype} -body {
    nstest_http -encoding iso8859-1 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding.utf2utf_adp?mime=iso"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result [list 200 "text/plain; charset=iso-8859-1" 3 "äöü"]

test encoding-4.1 {output charset changed to utf-8 with ns_adp_mimetype} -body {
    nstest_http -encoding utf-8 -getbody 1 -getheaders {Content-Type Content-Length} GET "/encoding.iso2iso_adp?mime=utf"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result [list 200 "text/plain; charset=utf-8" 6 "äöü"]

#
# test urlencoding
#

test encoding-5.1 {decode url with iso-8859-1 charset} -setup {
    ns_register_proc GET /encoding {
	ns_conn urlencoding iso8859-1
	set x [ns_queryget x NULL]
	ns_return 200 "text/plain; charset=iso-8859-1" $x
    }
} -body {
    nstest_http -encoding iso8859-1 -getbody 1 GET "/encoding?x=%e4%f6%fc"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result [list 200 "äöü"]


test encoding-5.2 {decode url with utf-8 charset} -setup {
    ns_register_proc GET /encoding {
	ns_conn urlencoding utf-8
	set x [ns_queryget x NULL]
	ns_return 200 "text/plain; charset=iso-8859-1" $x
    }
} -body {
    nstest_http -encoding iso8859-1 -getbody 1 GET "/encoding?x=%c3%a4%c3%b6%c3%bc"
} -cleanup {
    ns_unregister_proc GET /encoding
} -result [list 200 "äöü"]


cleanupTests
