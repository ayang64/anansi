# Emacs mode:  -*-Makefile-*-

#
# 1. Edit include/Makefile.build and replace Makefile.module with
#    Makefile.win32
# 
# 2. Update TCLPATH and VC varibales below to reflect actual path to
#    Tcl and VicualC++ installations
#   
# 3. nmake -f Makefile.win32
#
#    or
#
#    nmake -f Makefile.win32 TCLPATH=c:\tcl VC=c:\vc
#
#



TCLPATH	= C:\P\Tcl85
TCLLIB  = tcl85.lib

## TODO: Why is it necessary to set these variables here?  Shouldn't
## we just run the appropriate vcvars32.bat or other setup script?
## --atp@piskorski.com, 2014/09/17 12:05 EDT

# We definitely need this file:
#   "C:\Program Files\Microsoft SDKs\Windows\v7.1\Include\Windows.h"

#VC	= $(MY_VC)
#MSDK	= $(MY_MSDK)
VC	= C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC
MSDK	= C:\Program Files\Microsoft SDKs\Windows\v7.1

LIB	= $(LIB);$(MSDK)\Lib;$(TCLPATH)\lib
#LIB	= $(LIB);$(VC)\Lib
INCLUDE	= $(INCLUDE);$(MSDK)\Include;$(TCLPATH)\include
#INCLUDE	= $(INCLUDE);$(VC)\include

# include/Makefile.win32 uses this DEBUG flag.  For now default it to
# 1 rather than 0 or unset:
!ifndef DEBUG
DEBUG=1
!endif

# nmake command to exec for each module:
NMAKE	= nmake /nologo /e TCLPATH="$(TCLPATH)" TCLLIB="$(TCLLIB)" LIB="$(LIB)" DEBUG=$(DEBUG)


# Note our use below of nmake's macro string substition feature:
#   http://msdn.microsoft.com/en-us/library/bsd42ets%28v=vs.110%29.aspx
#
# Our use of $(build_targets) below expands into a separate target for
# each module, which is especially convenient when we only want to
# build one or two of them at a time (e.g., for debugging).  But nmake
# does not have anything like Gnu make's explicit ".PHONY" syntax, so
# we must make sure that each target name is NOT a valid file or
# directory.  Thus our use of _, I, or C prefixes with each module
# name.
#
# Independently of this makefile, to clean a single module you can
# simply cd into its subdirectory in the DOS/command shell and run
# "nmake clean".  That works fine.  Or using this makefile, you can
# run the single "clean" target to clean them all, or one or more
# individual clean targets like "Cnsthread Cnsd".
#
# --atp@piskorski.com, 2014/09/25 16:29 EDT

# For the core Naviserver modules, we use the same module/Makefile for
# both make and nmake.  Unfortunately, it looks like that won't work
# for add-on modules.  Their makefiles have more diversity, and even
# if they are did NOT, there are still other stumbling blocks.  E.g.:
#
# Microsoft nmake supports an undocumented "include" command, but it
# apparently ONLY allows hard-coded paths, it does NOT allow using
# variables!  The documented "!include" command, on the other hand,
# uses variables in the way you'd expect.
#
# So for add-on modules, we will instead use separate
# module/Makefile.win32 files.
# --atp@piskorski.com, 2014/10/10 17:25 EDT

core_targets = _nsthread _nsd _nscgi _nscp _nsdb _nssock _nslog _nsperm
module_targets = _FAKE

tgts_core_clean = $(core_targets:_=C)
tgts_modl_clean = $(module_targets:_=C)
tgts_core_inst  = $(core_targets:_=I)
tgts_modl_inst  = $(module_targets:_=I)

all: all-core all-mod
clean: clean-core clean-mod
install: install-core install-mod

all-core: $(core_targets)
all-mod:  $(module_targets)
clean-core: $(tgts_core_clean)
clean-mod:  $(tgts_modl_clean)
install-core: $(tgts_core_inst) I_tcl I_include
install-mod:  $(tgts_modl_inst)

# Bizarrely, from within nmake changing directories with "pushd" or
# "popd" only takes effect for THAT ONE LINE, while using "cd" retains
# the new directory location across multiple nmake command lines!
# Why, I have no idea.  --atp@piskorski.com, 2014/10/11 05:54 EDT

$(core_targets):
	pushd $(@:_=) & $(NMAKE) & popd
$(module_targets):
	if not exist "..\$(@:_=)" (echo No such directory:  ..\$(@:_=)) else ( \
	pushd "..\$(@:_=)" & $(NMAKE) -f Makefile.win32 & popd )
$(tgts_core_clean):
	pushd $(@:C=) & $(NMAKE) clean & popd
$(tgts_modl_clean):
	@if not exist "..\$(@:C=)" (echo No such directory:  ..\$(@:C=)) else ( \
	pushd "..\$(@:C=)" & $(NMAKE) -f Makefile.win32 clean & popd )


# TODO: I have not used nor debugged the install process here at all,
# as I currently use a Tcl script for installing on Windows.
# --atp@piskorski.com, 2014/10/10 12:14 EDT

# Install to the NAVISERVER directory:
$(tgts_core_inst):
	pushd $(@:I=) & $(NMAKE) install & popd
$(tgts_modl_inst):
	pushd "..\$(@:I=)" & $(NMAKE) -f Makefile.win32 install & popd
I_tcl:
	pushd tcl & nmake -f ../include/Makefile.win32 install-tcl & popd
I_include:
	pushd include & nmake -f Makefile.win32 install-include & popd
